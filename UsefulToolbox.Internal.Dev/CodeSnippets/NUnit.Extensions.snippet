<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2016 Igor Eroshkin

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Test Class</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit test class</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>tc</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>NUnit.Framework</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>ClassName</ID>
          <ToolTip>Name of the tested class</ToolTip>
          <Default>ClassName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[[TestFixture]
[TestOf(typeof($ClassName$))]
[Parallelizable]
public class $ClassName$Tests
{
    $end$
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Abstract Test Class</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit abstract test class</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>atc</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>ClassName</ID>
          <ToolTip>Name of the test class</ToolTip>
          <Default>ClassName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[public abstract class $ClassName$Tests
{
    $end$
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Test Method</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit test method</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>tm</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>NUnit.Framework</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>MethodName</ID>
          <ToolTip>Name of the tested method</ToolTip>
          <Default>MethodName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>TestName</ID>
          <ToolTip>Name of the method test</ToolTip>
          <Default>TestName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[[Test]
public void $MethodName$_$TestName$()
{
	$end$
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Async Test Method</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit async test method</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>atm</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>NUnit.Framework</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>MethodName</ID>
          <ToolTip>Name of the tested method</ToolTip>
          <Default>MethodName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>TestName</ID>
          <ToolTip>Name of the method test</ToolTip>
          <Default>TestName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[[Test]
public async Task $MethodName$Async_$TestName$()
{
	$end$
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Null Argument Test Method</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit test method that checks for ArgumentNullException</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>tmn</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>NUnit.Framework</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>MethodName</ID>
          <ToolTip>Name of the tested method</ToolTip>
          <Default>MethodName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>ArgumentName</ID>
          <ToolTip>Name of the tested argument</ToolTip>
          <Default>ArgumentName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[[Test]
public void $MethodName$_Null$ArgumentName$_ThrowsArgumentNullException()
{
	Assert.Catch<ArgumentNullException>(() => $end$);
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Null Argument Async Test Method</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit async test method that checks for ArgumentNullException</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>atmn</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>NUnit.Framework</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>MethodName</ID>
          <ToolTip>Name of the tested method</ToolTip>
          <Default>MethodName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>ArgumentName</ID>
          <ToolTip>Name of the tested argument</ToolTip>
          <Default>ArgumentName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[[Test]
public void $MethodName$Async_Null$ArgumentName$_ThrowsArgumentNullException()
{
	Assert.CatchAsync<ArgumentNullException>(() => $end$);
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Test Method With Abstract Test Cases</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit test method with abstract test cases</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>tmas</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>NUnit.Framework</Namespace>
        </Import>
        <Import>
          <Namespace>UsefulToolbox.NUnit.Extensions</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>MethodName</ID>
          <ToolTip>Name of the tested method</ToolTip>
          <Default>MethodName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>TestName</ID>
          <ToolTip>Name of the method test</ToolTip>
          <Default>TestName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[[TestCaseInstanceSource(nameof($MethodName$TestCases))]
public void $MethodName$_$TestName$()
{
	$end$
}
		
protected abstract IEnumerable<TestCaseData> $MethodName$TestCases { get; }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Async Test Method With Abstract Test Cases</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit async test method with abstract test cases</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>atmas</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
        <Import>
          <Namespace>NUnit.Framework</Namespace>
        </Import>
        <Import>
          <Namespace>UsefulToolbox.NUnit.Extensions</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>MethodName</ID>
          <ToolTip>Name of the tested method</ToolTip>
          <Default>MethodName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>TestName</ID>
          <ToolTip>Name of the method test</ToolTip>
          <Default>TestName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[[TestCaseInstanceSource(nameof($MethodName$TestCases))]
public async Task $MethodName$Async_$TestName$()
{
	$end$
}
		
protected abstract IEnumerable<TestCaseData> $MethodName$TestCases { get; }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Test Method With Test Cases</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit test method with test cases</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>tms</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>NUnit.Framework</Namespace>
        </Import>
        <Import>
          <Namespace>static UsefulToolbox.NUnit.Extensions.TestCaseHelpers</Namespace>
        </Import>
        <Import>
          <Namespace>UsefulToolbox.NUnit.Extensions</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>MethodName</ID>
          <ToolTip>Name of the tested method</ToolTip>
          <Default>MethodName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>TestName</ID>
          <ToolTip>Name of the method test</ToolTip>
          <Default>TestName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[[TestCaseInstanceSource(nameof($MethodName$TestCases))]
public void $MethodName$_$TestName$()
{
	$end$
}
		
private IEnumerable<TestCaseData> $MethodName$TestCases => TestCases(
);]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>NUnit Async Test Method With Test Cases</Title>
      <Author>Igor Eroshkin</Author>
      <Description>Code snippet for an NUnit async test method with test cases</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>atms</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
        <Import>
          <Namespace>NUnit.Framework</Namespace>
        </Import>
        <Import>
          <Namespace>static UsefulToolbox.NUnit.Extensions.TestCaseHelpers</Namespace>
        </Import>
        <Import>
          <Namespace>UsefulToolbox.NUnit.Extensions</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>MethodName</ID>
          <ToolTip>Name of the tested method</ToolTip>
          <Default>MethodName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>TestName</ID>
          <ToolTip>Name of the method test</ToolTip>
          <Default>TestName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[[TestCaseInstanceSource(nameof($MethodName$TestCases))]
public async Task $MethodName$Async_$TestName$()
{
	$end$
}
		
private IEnumerable<TestCaseData> $MethodName$TestCases => TestCases(
);]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>